[{"/home/bhawana-ubuntu/learning-React/my-first-app/src/index.js":"1","/home/bhawana-ubuntu/learning-React/my-first-app/src/reportWebVitals.js":"2"},{"size":1991,"mtime":1623500549029,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":1623489320209,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"g0j38j",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bhawana-ubuntu/learning-React/my-first-app/src/index.js",["11","12","13","14"],"// var React = require('react') \"OR\"\nimport React from 'react'\n// var ReactDOM = require('react-dom') \"OR\"\nimport ReactDOM from 'react-dom'\nimport \"./index.css\"\n\nconst first_name = \"Bhawana\";\nconst last_name = \"Tiwari\";\nconst img1 = \"https://picsum.photos/id/1/200/300\";\nconst img2 = \"https://picsum.photos/id/2/250/300\";\nconst img3 = \"https://picsum.photos/id/3/300/300\";\nconst img4 = \"https://picsum.photos/id/4/350/300\";\nconst link = \"https://www.linkedin.com/in/bhawanatiwari/\"\n\n// You can write \"React.Fragment\" or only <> </> also does the same. Avoid writing <div> </div> because it creates\n// an extra div inside root.\n\n// If you have to write Template Literals, then you have to use back-tick. \n// And if we have to use JS inside it then we have to write $ and curly braces.\n// Adding HTML Global Attribute : contenteditable (as contentEditable) i.e in cameCase in h1 tag\n// Adding image. As img tag is a self closing so / is required at the end\n// Created Image Gallery\n// Added anchor tag in one of the image\n// Added ./index.css\n// For writing inline css, you have to create an object like this\n/* const heading = {\n    color : \"#ff9191\",\n    textTransform: \"capitalize\"\n};\n*/\nReactDOM.render( \n    <React.Fragment> \n\n    <h1 className = \"heading\">My name is {first_name} {last_name} !!!</h1>\n    <p> \"OR\" you could also do it by using + operator</p> \n    <h1 contentEditable = \"true\">My name is {first_name + \" \" + last_name} !!!</h1>\n    <p> \"OR\" you could also do it by using a back-tick operator</p>\n    <h1> {`My name is ${first_name} ${last_name} !!!`} </h1> \n    <p>I am great. My lucky number is {3+4}. What is yours?</p>\n\n    <a href = {link} target = \"_myLinkedInProfile\">\n        <img src = {img1} alt = \"Random Image\"/>\n    </a>\n\n    <div className=\"img_div\">\n    <img src = {img2} alt = \"Random Image\"/>\n    <img src = {img3} alt = \"Random Image\"/>\n    <img src = {img4} alt = \"Random Image\"/>\n    </div>\n\n    </React.Fragment>, \n    document.getElementById(\"root\"))","/home/bhawana-ubuntu/learning-React/my-first-app/src/reportWebVitals.js",[],{"ruleId":"15","severity":1,"message":"16","line":42,"column":9,"nodeType":"17","endLine":42,"endColumn":49},{"ruleId":"15","severity":1,"message":"16","line":46,"column":5,"nodeType":"17","endLine":46,"endColumn":45},{"ruleId":"15","severity":1,"message":"16","line":47,"column":5,"nodeType":"17","endLine":47,"endColumn":45},{"ruleId":"15","severity":1,"message":"16","line":48,"column":5,"nodeType":"17","endLine":48,"endColumn":45},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]